/**
 * Env parser
 *
 * @author Allex Wang (allex.wxn@gmail.com)
 */

'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var fs = require('fs');
var path = require('path');
var dotenv = require('dotenv');
var parse = dotenv.parse;
var extend = require('util')._extend;

var DEFAULT_DOT_FILE = '.env';
var PATH_SEP = path.sep;

// Parses dotenv file
// Returns a variables mapping
var parseFile = function parseFile(file, encoding) {
  var envConfig = dotenv.parse(fs.readFileSync(file, encoding || 'utf8'));
  return envConfig;
};

var findEnvFile = function findEnvFile(root, dotfile) {
  if (typeof root === 'string') {
    if (root[root.length - 1] !== PATH_SEP) {
      root += PATH_SEP;
    }
    root = root.split(PATH_SEP);
  }

  if (!root.length) {
    return '';
  }

  root.pop();

  var f = path.join(root.join(PATH_SEP), dotfile);
  if (fs.existsSync(f)) {
    return f;
  }

  return findEnvFile(root, dotfile);
};

var _loaded = false;

var loadEnv = function loadEnv(file) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? { encoding: 'utf8', overwrite: true } : arguments[1];

  if (!file || (typeof file === 'undefined' ? 'undefined' : _typeof(file)) === 'object' || !fs.existsSync(file)) {
    options = file ? extend(options, file) : options;
    file = findEnvFile(process.cwd(), typeof file === 'string' ? file : DEFAULT_DOT_FILE);
    if (!file) {
      return null;
    }
  }

  var encoding = options.encoding || 'utf8';
  if (!options.overwrite) {
    return dotenv.load(file, { encoding: encoding });
  }
  var envs = parseFile(file, encoding);
  for (var k in envs) {
    process.env[k] = envs[k];
  }

  _loaded = true;

  // Implements dotenv.load specs
  return { parsed: envs };
};

// Patch env variables.
var getEnvParam = function getEnvParam(k, defval) {
  if (!_loaded) {
    loadEnv();
  }

  var v = process.env[k],
      type = 'string';
  if (defval != null) {
    type = typeof defval === 'undefined' ? 'undefined' : _typeof(defval);
  }
  if (v == null) v = defval;else if (type !== 'string') {
    // type cast
    switch (type) {
      case 'number':
        v = parseFloat(v, 10);
        break;
      case 'boolean':
        v = v === '1' || v === 'true' || v === 'on' || v === 'yes' ? true : false;
        break;
    }
  }
  return v;
};

/**
 * @see {dotenv.parse}
 */
exports.parse = parse;

/**
 * Load and parse dotenv file, Returns a env variables object.
 */
exports.parseFile = parseFile;

/**
 * Load dotenv file and apply to envs.
 * Optional set {options.overwrite} to indicate whether overwrite the exists envs.
 * (Defaults to true)
 *
 * @seealso {dotenv.load}
 */
exports.loadEnv = loadEnv;

/**
 * Get env variable by env key name, provide default value.
 * The returns typle will follow the type of the default value.
 *
 * @param {String} key The evn key name
 * @param {Mixed} defval (Optional) provide a default value if not found.
 *
 * @example
 *
 * process.env['WEB_SSL'] = '1';
 *
 * require('env-parse').getEnv('WEB_SSL', false)
 *  ->  true
 *
 * require('env-parse').getEnv('WEB_SSL', 0)
 *  -> 1
 */
exports.getEnv = getEnvParam;

/**
 * Set a specific enviroment variable value, the value will cast to string by
 * default.
 *
 * Note: This api will overwrite these values defined in `.env`
 */
exports.setEnv = function (k, v) {
  if (!_loaded) {
    loadEnv();
  }

  if (v == null) v = '';else v = String(v);

  process.env[k] = v;
};